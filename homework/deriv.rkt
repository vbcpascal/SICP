#lang racket
(define (index-of l e)
  (define (iter pos curr)
    (cond ((null? curr) false)
          ((eq? (car curr) e) pos)
          (else (iter (+ pos 1) (cdr curr)))))
  (iter 0 l))
(define (variable? e)
  (if (symbol? e)
      true
      false))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (sum? e)
  (if (not (pair? e))
      false
      (let ((pos (index-of e '+)))
        (if pos true false))))
(define (flatten-if-single e)
  (if (and (list? e) (null? (cdr e)))
      (car e)
      e))
(define (addend e)
  (let ((pos (index-of e '+)))
    (flatten-if-single (take e pos))))
(define (augend e)
  (let ((pos (index-of e '+)))
    (flatten-if-single (drop e (+ pos 1)))))
(define (=number? e n)
  (and (number? e) (= e n)))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (list? a1) (list? a2))
         (append a1 (list '+) a2))
        ((and (list? a1) (not (list? a2)))
         (append a1 (list '+ a2)))
        ((and (not (list? a1)) (list? a2))
         (append (list a1 '+) a2))
        (else (list a1 '+ a2))))
(define (product? e)
  (and (pair? e) (eq? (cadr e) '*)))
(define multiplier car)
(define (multiplicand e)
  (if (null? (cdddr e))
      (caddr e)
      (cddr e)))
(define (make-product m1 m2)
  (cond ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((or (=number? m1 0) (=number? m2 0)) 0)
        (else (list m1 '* m2))))

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum 
          (make-product (multiplier exp)
                        (deriv (multiplicand exp) var))
          (make-product (deriv (multiplier exp) var)
                        (multiplicand exp))))
        (else 
         (error "wrong format"))))

(define (myloop)
  (let ((a (read)))
    (if (eq? a eof)
        (void)
        (begin (display (deriv a 'x)) (newline) (myloop)))))

(myloop)
