#lang racket
(define (subsets s)
  (if (null? s)
      (list)
      (let ((lst (subsets (cdr s))))
        (append (map (lambda (x) (cons (car s) x))
                          lst) lst))))
(define (getit g)
  (if (null? g)
      '()
  (if (null? (cdr g))
      (list (car g))
      (if (= (car g) (cadr g))
          (getit (cdr g))
          (cons (car g) (getit (cdr g)))))))
;(getit '(1 3 3 5 5 6 6 6 7 7 8 12 12 12 12 13 13))
(define (res n lst)
  (if (= n 0)
      lst
      (res (- n 1) (subsets lst))))
(define (main)
  (let ((lst (read))
        (n (read)))
    (if (eq? lst eof)
        (void)
        (begin
          (displayln (res n (getit (sort lst <))))
          (main)))))
(main)
        
